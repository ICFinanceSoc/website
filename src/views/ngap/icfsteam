{% extends "ngap/skeleton" %}

{% set ayear = "now"|date('Y') - ("now"|date('m') < 8) %}
{% set date = { "long" : ayear, "short" : ayear|slice(2) } %}
{% set comittee = comittee|merge({null:null}) %} {# Add an empty member for "add" #}

{% block content %}
<div class="page-header">
	<h1>ICFS Team Management <small>Currently {{ayear}}</small></h1>
</div>
<div class="edit-panel">
	<div class="btn-group">
		<a class='btn {% if selectyear == (date.long - 2) %}btn-success{%endif%}' href='{{date.long - 2}}'>{{date.long - 2}}/{{date.short - 1}}</a>
		<a class='btn {% if selectyear == (date.long - 1) %}btn-success{%endif%}' href='{{date.long - 1}}'>{{date.long - 1}}/{{date.short}}</a>
		<a class='btn {% if selectyear == (date.long) %}btn-success{%endif%}' href='{{date.long}}'>{{date.long}}/{{date.short + 1}}</a>
		<a class='btn {% if selectyear == (date.long + 1) %}btn-success{%endif%}' href='{{date.long + 1}}'>{{date.long + 1}}/{{date.short + 2}}</a>
	</div>
	<form method="POST">
	{% if comittee|length < 1 %}
		No comittee this year. Cool.
	{% endif %}
	<ul id="sortable" class="nav">
	{% for whorekey, whore in comittee %}
	{% set index = (whore == null) ? "__new" : ((whore.name == null) ? whorekey : whore.name) %}
	<li {% if whore == null %}id="add-comittee"{% endif %}>
	<div class="comittee-holder">
		{% if whore == null %}<div class="alert alert-info">Add new position; Leave blank to ignore</div>{% endif %}
		<div class="comittee-image" >
			<a class="hover">Upload New</a>
			<img class="img-rounded" src="{{whore.img}}" />
			<input type="hidden" name="comittee[{{index}}][img]" value="{{whore.img}}" />
		</div>
		<div class="comittee-content">
			<div class="input-prepend">
				<span class="add-on"><i class="icon-user"></i></span>
				<input name="comittee[{{index}}][name]" class="name span6" type="text" value="{{whore.name}}">
			</div>
			<div class="input-prepend">
				<span class="add-on"><i class="icon-star"></i></span>
				<input name="comittee[{{index}}][position]" class="span6 name" type="text" value="{{whore.position}}">
			</div>
			<div class="input-prepend">
				<span class="add-on"><i class="icon-home"></i></span>
				<input name="comittee[{{index}}][dept]" class="span6 name" type="text" value="{{whore.dept}}">
			</div>
			<div class="sortbuttons">
				<div class="btn-group">
					<a class="btn btn-large move move-up"><i class="icon-circle-arrow-up"></i> Move Up</a>
					<a class="btn btn-large move move-down"><i class="icon-circle-arrow-down"></i> Move Down</a>
				</div><br />
				<small>Or, drag and drop!</small>
			</div>
		</div>
		<br style="clear:both" /><br />
		<textarea name="comittee[{{index}}][about]" class="tinymce {{whore.name}}">{{whore.about}}</textarea>
		{% if whore != null %}<hr />{%endif%}
	</div>
	</li>
	{% endfor %}
	</ul>
	<input type="submit" class="btn btn-large btn-primary btn-block" value="Save"/>
	</form>
	<div id="uploader">
		{%include "ngap/uploadFiles_mainPage" %}
	</div>
</div>
{% endblock %}

{% block contentclass %} content-pageedit{% endblock %}

{% block srcpagejs %}
{% include "ngap/uploadFiles_src" %}
<script src="{{path('homepage')}}assets/js/vendor/tiny_mce/jquery.tinymce.js"></script>
<script src="{{path('homepage')}}assets/js/bootbox.min.js"></script>{% endblock %} {# TinyMCE JS Source #}

{% block pagejs %}
{% include "ngap/uploadFiles_scriptPage" %}
<script>
$(function() {
    {% include "ngap/tinymce.twig" %} {# TinyMCE settings/config #}

	var updateInsertButtons = function(that) {
        $("button.insert").each(function(){
            $(this).click(function(){
                that.find('.comittee-image img').attr("src", $(this).attr('data-url'));
                that.find('.comittee-image input').attr("value", $(this).attr('data-url'));

            	return false;
            })
        });
    }

	var setupButtons = function(tinymce) {
		$(".comittee-content .move-up").removeClass("disabled").first().addClass("disabled");
		$(".comittee-content .move-down").removeClass("disabled").last().addClass("disabled");
		if (tinymce != false)
			$('textarea.tinymce').each(function() {
				$(this).tinymce().remove();
				$(this).tinymce(tinyMCEsetting);
			});
	}
	setupButtons(false);

	var makeUI = function() {

		$("li").each(function() {

			var thatparent = $(this);

			$('.hover', this).click(function(){
				bootbox.dialog("", [{"label" : "Finish", "callback" : function() {
					$("#uploader").appendTo("body").hide();
				}}])

				$('#fileupload').fileupload('option', 'done', function(e, data) {
				var that = $(this).data('blueimp-fileupload') || $(this).data('fileupload'),
	                files = that._getFilesFromResponse(data),
	                template,
	                deferred;
	            if (data.context) {
	                data.context.each(function (index) {
	                    var file = files[index] || {error: 'Empty file upload result'},
	                        deferred = that._addFinishedDeferreds();
	                    if (file.error) {
	                        that._adjustMaxNumberOfFiles(1);
	                    }
	                    that._transition($(this)).done(
	                        function () {
	                            var node = $(this);
	                            template = that._renderDownload([file]).replaceAll(node);
	                            that._forceReflow(template);
	                            that._transition(template).done(
	                                function () {
	                                updateInsertButtons(thatparent);
	                                    data.context = $(this);
	                                    that._trigger('completed', e, data);
	                                    that._trigger('finished', e, data);
	                                    deferred.resolve();
	                                }
	                            );
	                        }
	                    );
	                });
	            } else {
	                if (files.length) {
	                    $.each(files, function (index, file) {
	                        if (data.maxNumberOfFilesAdjusted && file.error) {
	                            that._adjustMaxNumberOfFiles(1);
	                        } else if (!data.maxNumberOfFilesAdjusted &&
	                                !file.error) {
	                            that._adjustMaxNumberOfFiles(-1);
	                        }
	                    });
	                    data.maxNumberOfFilesAdjusted = true;
	                }
	                template = that._renderDownload(files)
	                    .appendTo(that.options.filesContainer);
	                that._forceReflow(template);
	                deferred = that._addFinishedDeferreds();
	                that._transition(template).done(
	                    function () {
	                        updateInsertButtons(thatparent);
	                        data.context = $(this);
	                        that._trigger('completed', e, data);
	                        that._trigger('finished', e, data);
	                        deferred.resolve();
	                    
	                    }    
	                );
	            }   
	    	});

				$("#uploader").appendTo(".bootbox .modal-body").show();
				updateInsertButtons(thatparent)
			})
			$('.move-up', this).click(function() {
				thatparent.prev().before(thatparent);
				setupButtons();
			})
			$('.move-down', this).click(function() {
				thatparent.next().after(thatparent);
				setupButtons();
			})
		});

		$('.comittee-image').mouseenter(function(){
		    var image= $(this).find('img'),
		        caption = $(this).find('a');
		    caption.css("padding-top", ((parseInt(image.css('height')) / 2.0) - 15));
		    caption.width(image.width());
		    caption.height(image.height());
		    caption.fadeIn();
		}).mouseleave(function(){
		     var image= $(this).find('img'),
		        caption = $(this).find('a');
		    
		    caption.width(image.width());
		    caption.height(image.height());
		    caption.fadeOut();
		});
	}; makeUI();

    $( "#sortable" ).sortable({
		revert: true,
		forcePlaceholderSize: true
    });

    $( "ul, li" ).disableSelection();

});
</script>
{% endblock %}